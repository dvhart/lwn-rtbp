    Title: Real-Time Linux Best Practices: Introduction
  Authors: Darren Hart <dvhltc@us.ibm.com>
Reviewers: JV <jvrao@us.ibm.com>
           Ankita Garg
           Clark Williams
           Paul McKenney



Introduction
============
While real-time systems are by no means a new phenomenon, a new class of real-time systems has grown from the increasing demands modern workloads are placing on their underlying operating system (OS) for fast response times, deterministic behavior, and additional control of what runs when.  These workloads are not limited to the relatively small control systems typically supported by proprietary embedded real-time operating systems (RTOS), but rather Enterprise class workloads involving thousands of execution contexts, advanced interprocess communication and synchronization, networking and messaging stacks, SAN storage, and parallel computing.  The advent of multicore CPUs, which have found their way into even the most basic consumer-level computing hardware, has made it necessary for a modern RTOS to support large SMP systems.  These heavy-weight requirements draw the line between the traditional RTOS and Enterprise Real-Time Linux.

To meet these demands, developers from companies like IBM [0], Red Hat, and Novell have worked to productize the existing real-time support in the Linux kernel and to incorporate the PREEMPT_RT [1] patchset of Ingo Molnar.  With products like Red Hat's MRG [2] and Novell's SLERT [3] now available to the masses, there exists a need to revisit and expand the traditional real-time system configuration and application development practices.

This article is the first of a series of articles that will outline a set of best practices for the initial configuration and tuning of a modern Enterprise Real-Time Linux system and the development of enterprise real-time applications.  Like those written for a traditional RTOS, Real-Time Linux applications must be designed with a solid understanding of their target system.  Setting up appropriate priorities and CPU affinities for all the application and kernel threads must be taken into account. While programming these applications is done in conformance to POSIX standards, there are several less-than-obvious pitfalls that this series will attempt to address, citing kernel implementation details as justification.  With these articles as a guide, the reader will have the information they need to properly configure their OS and select the appropriate mechanisms to achieve their application design goals with a minimal amount of frustration.

This article will kick off the series with a discussion of the history and applicability of Enterprise Real-Time Linux.

Next section...
===============

Up Next: Getting Started with Enterprise Real-Time Linux
========================================================
In our next instalment, we'll take a look at getting started with Enterprise Real-Time Linux. We will cover kernel configuration and compilation, installation, and system configuration.

References
==========
[0] http://www-03.ibm.com/linux/realtime.html
[1] Download PREEMPT_RT releases from http://rt.et.redhat.com/download/ or start working with the new git repository from git://git.kernel.org/pub/scm/linux/kernel/git/rostedt/linux-2.6-rt.git
[2] Red Hat MRG website http://www.redhat.com/mrg/
[3] Novel SLERT website http://www.novell.com/products/realtime/
[4] http://www.redhat.com/docs/en-US/Red_Hat_Enterprise_MRG/1.0/html/Real_Time_Deployment_Guide/
