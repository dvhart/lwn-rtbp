    Title: Real-Time Linux Best Practices: Introduction and System Configuration
  Authors: Darren Hart <dvhltc@us.ibm.com>
Reviewers: JV <jvrao@us.ibm.com>


Introduction
============
While real-time systems are by no means a new phenomenon, a new class of real-time systems has grown from the increasing demands modern workloads are placing on their underlying operating system (OS) for fast response times, deterministic behavior, and additional control of what runs when.  These workloads are not limited to the relatively small control systems typically supported by proprietary embedded real-time operating systems (RTOS), but rather Enterprise class workloads involving thousands of execution contexts, advanced interprocess communication and synchronization, networking and messaging stacks, SAN storage, and parallel computing.  These heavy-weight requirements draw the line between the traditional RTOS and Enterprise Real-Time Linux.

To meet these demands, developers from companies like IBM, Red Hat, and Novell have worked to productize the existing real-time support in the Linux kernel and to incorporate the PREEMPT_RT patchset of Ingo Molnar.  With products like Red Hat's MRG and Novell's SLERT now available to the masses, there exists a need to revisit and expand the traditional real-time system configuration and application development practices.

This article is the first of a series of articles that will outline a set of best practices for the initial configuration and tuning of a modern Enterprise Real-Time Linux system and the development of enterprise real-time applications.  Like those written for a traditional RTOS, Real-Time Linux applications must be designed with a solid understanding of their target system.  Parameters such as interrupt handler priority and CPU affinity must be taken into account.  While programming these applications is done in conformance to POSIX standards, there are several less-than-obvious pitfalls that this series will attempt to address, citing kernel implementation details as justification.  With these articles as a guide, the reader will have the information they need to properly configure their OS and select the appropriate mechanisms to achieve their application design goals with a minimal amount of frustration.

This article will kick off the series with a discussion of the initial setup, configuration, and tuning of an Enterprise Real-Time OS.  While differences exist in the details between vendors, these articles will keep to the general principle as much as possible, citing vendor specific tools and processes only when necessary to ensure a clear understanding of the situation.


System Configuration
====================
As with any system, real-time systems must be configured to prevent accidental (or malicious) acts that can be detrimental to the goals of the system.  This is especially true with real-time systems where the failure to meet a design criteria can have catastrophic consequences such as property damage, serious financial impact, and even loss of life.  For this reason, the configuration of the system is as much a part of the overall solution architecture as the applications designed to run on it.


Configuring Real-Time Privileges
--------------------------------
By default, Linux restricts the use several mechanisms critical to the implementation of a real-time system.  These include user limits governing the use of the POSIX scheduling interfaces as well as maximum locked memory size, and others.  Typically, even the root user has limits imposed.  A new user will typically see limits such as the following:

$ ulimit -r -e -l
real-time priority              (-r) 0
scheduling priority             (-e) 0
max locked memory       (kbytes, -l) 32

Recent versions of PAM (FIXME: check required version) allow for these limits to be adjusted on a per user or group basis via the security limits configuration files, LIMITS.CONF(5) [1].  A common approach is to create a "realtime" group and bless it with various privileges associated with running real-time applications.

@realtime        -       rtprio          100
@realtime        -       nice            -20
@realtime        -       memlock         unlimited

Once a member of the "realtime" group, the same user will have the following limits:

$ ulimit -r -e -l
real-time priority              (-r) 100
scheduling priority             (-e) 39
max locked memory       (kbytes, -l) unlimited

With these settings, users in the "realtime" group can use the POSIX scheduler API for setting the SCHED_FIFO and SCHED_RR scheduling policies with any of the 99 priorities, as well lock an unlimited amount of memory to prevent unwanted paging.  These APIs and their use in practice will be discussed in greater in a subsequent article.


Prioritizing System Threads
---------------------------
One of the core features of the real-time Linux kernel is threaded interrupt handlers and finer grained soft-irq [2] threads.  This allows for these system threads to be carefully prioritized in order to maximize serviceability of those devices critical to a system's design criteria while minimizing preemptions and latencies from those of secondary importance.  The kernel sets most of these threads to priority 50 at boot.  A quick scan with "ps" will provide a list of these system threads.

$ ps -eLo pid,rtprio,policy,comm | egrep "PID|FF"
  PID RTPRIO POL COMMAND
    3     99 FF  migration/0
    4     99 FF  posixcputmr/0
    5     50 FF  sirq-high/0
    6     50 FF  sirq-timer/0
    7     50 FF  sirq-net-tx/0
    8     50 FF  sirq-net-rx/0
    9     50 FF  sirq-block/0
   10     50 FF  sirq-tasklet/0
   11     50 FF  sirq-sched/0
   12     50 FF  sirq-hrtimer/0
   13     50 FF  sirq-rcu/0
   14     99 FF  watchdog/0
   55      1 FF  events/0
<--- snip : remove per-cpu threads for cpus 1,2,3 --->
  119     50 FF  IRQ-9
  307      1 FF  krcupreemptd
  441     50 FF  IRQ-12
  442     50 FF  IRQ-1
  453     50 FF  IRQ-8
  457     50 FF  loadavg
  458     50 FF  IRQ-3
  465     50 FF  IRQ-5
  549     50 FF  IRQ-19
 1483     50 FF  IRQ-6
 2209     50 FF  IRQ-17
 2801     50 FF  IRQ-4

Note: Per-CPU threads are designated with a /# suffix (where # is the CPU it's running on).  There will be one instance of thread running on every CPU.

If, for example, the design requires a timely response to an event sent via an interrupt from a specific device, the priority of that device's interrupt handler can be set relatively high in comparison with the application itself, as well as the interrupt handlers of less critical hardware (possibly networking and block devices).  This can be accomplished in a number of ways.  While experimenting to find the best priority settings, the user can simply use the "chrt" command to adjust priorities at runtime.  Once the final set of priorities has been determined, they can be saved off in a configuration file [3] to be consulted at each boot.

An example MRG rtgroups file looks like this:

kthreads:*:1:*:\[.*\]$
watchdog:f:99:*:\[watchdog.*\]
migration:f:99:*:\[migration\/.*\]
softirq:f:70:*:\[.*(softirq|sirq).*\]
softirq-net-tx:f:75:*:\[(softirq|sirq)-net-tx.*\]
softirq-net-rx:f:75:*:\[(softirq|sirq)-net-rx.*\]
softirq-sched:f:1:*:\[(softirq|sirq)-sched\/.*\]
rpciod:f:80:*:\[rpciod.*\]
lockd:f:80:*:\[lockd.*\]
nfsd:f:80:*:\[nfsd.*\]
hardirq:f:85:*:\[IRQ[\-_].*\]

And at boot, the system threads priorities are:

  PID RTPRIO POL COMMAND
    3     99 FF  migration/0
    4     99 FF  posixcputmr/0
    5     70 FF  sirq-high/0
    6     70 FF  sirq-timer/0
    7     75 FF  sirq-net-tx/0
    8     75 FF  sirq-net-rx/0
    9     70 FF  sirq-block/0
   10     70 FF  sirq-tasklet/0
   11      1 FF  sirq-sched/0
   12     70 FF  sirq-hrtimer/0
   13     70 FF  sirq-rcu/0
   14     99 FF  watchdog/0
   55      1 FF  events/0
   <--- snip : remove per-cpu threads for cpus 1,2,3 --->
  119     85 FF  IRQ-9
  307      1 FF  krcupreemptd
  441     85 FF  IRQ-12
  442     85 FF  IRQ-1
  453     85 FF  IRQ-8
  457     50 FF  loadavg
  458     85 FF  IRQ-3
  465     85 FF  IRQ-5
  549     85 FF  IRQ-19
  594     80 FF  rpciod/0
  595     80 FF  rpciod/1
  596     80 FF  rpciod/2
  597     80 FF  rpciod/3
 1483     85 FF  IRQ-6
 2209     85 FF  IRQ-17
 2801     85 FF  IRQ-4

If you find that simply prioritizing these threads is not sufficient to keep your application from experiencing unwanted latencies, you can look into pinning certain threads (both system and application) to specific CPUs or sets of CPUs using the TASKSET(1) command, and then specifying the affinity in the rtgroups file [4] once you've settled on the final configuration.  CPU pinning can also help reduce the additional scheduling overhead involved with strict real-time priority scheduling as well as provide some relief from adverse cache effects.  CPU pinning (and CPU shielding) will be discussed in more detail in a future article dealing specifically with real-time scheduling and tuning.  Of course, if you aren't using an official real-time Linux distribution, you can always write a simple rc script using "chrt" and "taskset" to make these changes automatic as well.

I believe the remainder of my notes here can be left for a paper specifically targetted for tuning...
  - irq balancer
  - kernel threads (kswapd, migration threads, etc.)
  - mention tools like tuna
  - discuss how interrupts as threads can not only prioritized, but are now also preemptible
  - look at introducing cset... maybe leave that for the scheduling paper
  - look at discussing ionice...


Hardware Considerations
-----------------------
In addition to carefully prioritizing interrupt handlers and system threads to reduce latencies to your real-time application, care should be taken in selecting your target hardware platform.  Both System Management Interrupts (SMIs) and power management settings can have an adverse effect on latencies.

SMIs are used on many platforms to handle several types of hardware health checks and system diagnostics.  When an SMI is issued, the OS is delayed while system service routines run on the CPU.  These are not able to be prioritized and can occur at any time.  Unless the hardware manufacturer has provided a supported means to suppress SMIs, it is generally not a good idea to do so as it could lead to physical damage to your system.

Many system BIOSs include power management options to control features such as hard-drive spin down, CPU sleep states, and CPU frequency scaling.  These options can have a significant impact on latencies, and may need to be disabled in order to meet certain latency requirements.


Servicability
-------------
Servicability often becomes an issues for people developing real-time applications, especially for the first time.  It is fairly easy to misprioritize your applications, or the sytem threads, and send your machine into an uninterruptible busy loop.  Without some precautions, the only way out of this is a hard shutdown.

In a development environment it can be helpful to run an ssh daemon and the network IRQ thread and sirq-net-* threads at an elevated priority (somewhere around 95), and ensure none of your application threads exceed that.  Should your application begin to spin, you can use this high priority ssh daemon to log into the machine and kill the offending processes without having to power off your system.  Note this approach should not be used in a production environment or on any public network as it poses a risk for a Denial of Service attack (DOS) - at real-time priority no less!

Another option is to run something like the rtwatchdog daemon [5], which uses a SCHED_FIFO 99 thread (the watchdog) to check the progress of a SCHED_OTHER thread (the canary).  If the canary fails to chirp within a specified threshold, the rtwatchdog will take action.  You can select from a set of predefined actions, or specify an external command for the watchdog to run.  Typical actions include killing runaway real-time processes or rebooting the machine (nicely).  Your own actions can be made much more targetted in order to deal with your specific needs.

If you find your system hanging or crashing repeatedly and can't account for it with your application, a kernel core dump can be helpful in diagnosing potential kernel bugs.  Kdump can be configured to dump memory to disk at panic or via the SysRq interface.  Crash is then used to analyze this core.


What's Next
-----------
In our next installment, we'll take a closer look at Real-Time scheduling, including typical scheduling tasks such as perioding scheduling as well as common pitfalls to avoid.


[1] Red Hat MRG sets these in the limits.d/realtime.conf file while Novell SLERT uses the limits.conf file.  The syntax for each is the same.
[2] Depending on your kernel version, soft irqs will appear in ps as softirq-* or sirq-*.
[3] Red Hat MRG uses /etc/rtgroups while Novell SLERT uses /etc/set_kthread_prio.conf (from the ibmrtpkgs package)
[4] Note that set_kthread_prio.conf doesn't allow for cpu pinning (FIXME: Novell to confirm proper method)
[5] rtwatchdog is included as its own package in MRG and as part of the ibmrtpkgs pacakge on SLERT
